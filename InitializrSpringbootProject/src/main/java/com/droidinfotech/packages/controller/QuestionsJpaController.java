package com.droidinfotech.packages.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.droidinfotech.packages.model.Questions;
import com.droidinfotech.packages.model.QuestionsRepository;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import org.springframework.web.servlet.ModelAndView;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/Questions") 
public class QuestionsJpaController {
    
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private QuestionsRepository QuestionsRepository;

    @GetMapping(path = "/add")
    public String addAction(Model model) {
       
        model.addAttribute("question", new Questions());
        model.addAttribute("title", "Add Question");
        model.addAttribute("addStatus", true);
        return "questions/addquestion";
    }

    @PostMapping(path = "/add") // Map ONLY GET Requests
    public String addNewQuestion(@ModelAttribute Questions questions, Model model) {
        //System.out.println(user.getEmail());
        /*String name=request.getParameter("name");
        String email=request.getParameter("email");
        String password=request.getParameter("password");
        User n = new User();
        n.setName(name);
        n.setPassword(password);
        n.setEmail(email);
        n.setCreatedOn("2018-10-30");
        userRepository.save(n);*/
        Date date = new Date();
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        System.out.println(ft.format(date));
        questions.setCreatedOn(ft.format(date));
        QuestionsRepository.save(questions);
        model.addAttribute("questions", questions);
        return "redirect:/Questions/list";
        //return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Questions> getAllQuestions() {
        // This returns a JSON or XML with the users
        return QuestionsRepository.findAll();
    }

    @GetMapping("/list")
    public ModelAndView getAll() {
        ModelAndView modelAndView = new ModelAndView("questions/listQuestions");
        modelAndView.addObject("questionslist", QuestionsRepository.findAll());
        return modelAndView;
    }

    @RequestMapping(value = "/{id}/edit", method = GET)
    public String editAction(Model model, @PathVariable("id") int id) {
        model.addAttribute("questions", QuestionsRepository.findById(id));
        model.addAttribute("editId", id);
        return "questions/addquestion";
    }

    @RequestMapping(value = "/{id}/delete", method = GET)
    public String deleteAction(Model model, @PathVariable("id") int id) {
        QuestionsRepository.deleteById(id);
        return "redirect:/Questions/list";

    }
        
}
