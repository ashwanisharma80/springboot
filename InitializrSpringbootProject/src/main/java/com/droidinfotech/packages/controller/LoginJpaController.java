package com.droidinfotech.packages.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.droidinfotech.packages.model.User;
import com.droidinfotech.packages.model.UserRepository;
import java.io.PrintStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

//import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
//import org.springframework.data.jpa.repository.Query;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
//import static org.springframework.web.bind.annotation.RequestMethod.POST;
import org.springframework.web.servlet.ModelAndView;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/") // This means URL's start with /demo (after Application path)
public class LoginJpaController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    public static String getMd5(String input) {
        try {
            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5");
            // digest() method is called to calculate message digest 
            //  of an input digest() return array of byte 
            byte[] messageDigest = md.digest(input.getBytes());
            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest);
            // Convert message digest into hex value 
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    @RequestMapping("/login")
    public String loginAction(HttpServletRequest request, HttpSession session) {
        if (session.getAttribute("userDetails") != null) {
            
        }
        return "registration/login";
    }

    @PostMapping("/Checklogin")
    public String Checklogin(HttpServletRequest request, HttpSession session) {
        String password = request.getParameter("password");
        String username = request.getParameter("username");
        if (username != null && password != null) {
            List user = userRepository.checkLogin(username, getMd5(password));
            //System.out.println(user.size());
            if (user.size() > 0) {
                session.setAttribute("user", user);
                //System.out.println(user);
                Set<GrantedAuthority> grantedAuthorities = new HashSet<>();
                
                // for (Role role : user.getRoles()) {
                //grantedAuthorities.add(new SimpleGrantedAuthority(role.getName()));
                //}
                //https://www.programcreek.com/java-api-examples/index.php?api=org.springframework.security.core.authority.SimpleGrantedAuthority
                grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER"));
                org.springframework.security.core.userdetails.User userDetails = new org.springframework.security.core.userdetails.User(username, getMd5(password), grantedAuthorities);
                session.setAttribute("userDetails", userDetails);
                new InMemoryUserDetailsManager(userDetails);
                return "redirect:/Users/list";

            }
            //System.out.println(userRepository.checkLogin(email, getMd5(password)));
        }

        return "registration/login";
    }

}
